{"ast":null,"code":"import { UserService } from \"./../../shared/user.service\";\nimport { ToastrService } from \"ngx-toastr\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../shared/user.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction RegistrationComponent_label_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_label_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"Invalid email address.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_label_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_label_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"Minimum 4 characters required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_label_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"This field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegistrationComponent_label_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 13);\n    i0.ɵɵtext(1, \"Confirm Password does not match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let RegistrationComponent = /*#__PURE__*/(() => {\n  class RegistrationComponent {\n    constructor(service, toastr) {\n      this.service = service;\n      this.toastr = toastr;\n    }\n    ngOnInit() {\n      this.service.formModel.reset();\n    }\n    onSubmit() {\n      this.service.register().subscribe(res => {\n        debugger;\n        if (res.succeeded) {\n          this.service.formModel.reset();\n          this.toastr.success(\"New user created!\", \"Registration successful.\");\n        } else {\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case \"DuplicateUserName\":\n                this.toastr.error(\"Username is already taken\", \"Registration failed.\");\n                break;\n              default:\n                this.toastr.error(element.description, \"Registration failed.\");\n                break;\n            }\n          });\n        }\n      }, err => {\n        console.log(err);\n      });\n    }\n  }\n  RegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n    return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.ToastrService));\n  };\n  RegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegistrationComponent,\n    selectors: [[\"app-registration\"]],\n    decls: 32,\n    vars: 8,\n    consts: [[\"autocomplete\", \"off\", 3, \"formGroup\", \"submit\"], [1, \"form-group\", \"required\"], [\"formControlName\", \"UserName\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"formControlName\", \"Email\", 1, \"form-control\"], [\"formControlName\", \"FullName\", 1, \"form-control\"], [\"formGroupName\", \"Passwords\"], [\"type\", \"password\", \"formControlName\", \"Password\", 1, \"form-control\"], [\"type\", \"password\", \"formControlName\", \"ConfirmPassword\", 1, \"form-control\"], [1, \"form-row\"], [1, \"form-group\", \"col-md-8\", \"offset-md-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-block\", 3, \"disabled\"], [1, \"text-danger\"]],\n    template: function RegistrationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"submit\", function RegistrationComponent_Template_form_submit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\");\n        i0.ɵɵtext(3, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵtemplate(5, RegistrationComponent_label_5_Template, 2, 0, \"label\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\");\n        i0.ɵɵtext(8, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵtemplate(10, RegistrationComponent_label_10_Template, 2, 0, \"label\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 4)(12, \"label\");\n        i0.ɵɵtext(13, \"Full Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 7)(16, \"div\", 1)(17, \"label\");\n        i0.ɵɵtext(18, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 8);\n        i0.ɵɵtemplate(20, RegistrationComponent_label_20_Template, 2, 0, \"label\", 3);\n        i0.ɵɵtemplate(21, RegistrationComponent_label_21_Template, 2, 0, \"label\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 1)(23, \"label\");\n        i0.ɵɵtext(24, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 9);\n        i0.ɵɵtemplate(26, RegistrationComponent_label_26_Template, 2, 0, \"label\", 3);\n        i0.ɵɵtemplate(27, RegistrationComponent_label_27_Template, 2, 0, \"label\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 10)(29, \"div\", 11)(30, \"button\", 12);\n        i0.ɵɵtext(31, \"Sign Up\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.service.formModel);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"UserName\").touched && (ctx.service.formModel.get(\"UserName\").errors == null ? null : ctx.service.formModel.get(\"UserName\").errors.required));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"Email\").touched && (ctx.service.formModel.get(\"Email\").errors == null ? null : ctx.service.formModel.get(\"Email\").errors.email));\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"Passwords.Password\").touched && (ctx.service.formModel.get(\"Passwords.Password\").errors == null ? null : ctx.service.formModel.get(\"Passwords.Password\").errors.required));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"Passwords.Password\").touched && (ctx.service.formModel.get(\"Passwords.Password\").errors == null ? null : ctx.service.formModel.get(\"Passwords.Password\").errors.minlength));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"Passwords.ConfirmPassword\").touched && (ctx.service.formModel.get(\"Passwords.ConfirmPassword\").errors == null ? null : ctx.service.formModel.get(\"Passwords.ConfirmPassword\").errors.required));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.service.formModel.get(\"Passwords.ConfirmPassword\").touched && (ctx.service.formModel.get(\"Passwords.ConfirmPassword\").errors == null ? null : ctx.service.formModel.get(\"Passwords.ConfirmPassword\").errors.passwordMismatch));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !ctx.service.formModel.valid);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i4.FormGroupName],\n    encapsulation: 2\n  });\n  return RegistrationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}