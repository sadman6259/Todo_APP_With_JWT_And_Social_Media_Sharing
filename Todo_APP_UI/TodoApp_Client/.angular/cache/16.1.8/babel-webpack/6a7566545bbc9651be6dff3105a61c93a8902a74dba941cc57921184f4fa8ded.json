{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(fb, http) {\n      this.fb = fb;\n      this.http = http;\n      this.BaseURI = 'http://todoappcicd.azurewebsites.net/api/';\n      this.formModel = this.fb.group({\n        UserName: ['', Validators.required],\n        Email: ['', Validators.email],\n        FullName: [''],\n        Passwords: this.fb.group({\n          Password: ['', [Validators.required, Validators.minLength(4)]],\n          ConfirmPassword: ['', Validators.required]\n        }, {\n          validator: this.comparePasswords\n        })\n      });\n    }\n    comparePasswords(fb) {\n      let confirmPswrdCtrl = fb.get('ConfirmPassword');\n      //passwordMismatch\n      //confirmPswrdCtrl.errors={passwordMismatch:true}\n      if (confirmPswrdCtrl.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {\n        if (fb.get('Password').value != confirmPswrdCtrl.value) confirmPswrdCtrl.setErrors({\n          passwordMismatch: true\n        });else confirmPswrdCtrl.setErrors(null);\n      }\n    }\n    register() {\n      var body = {\n        UserName: this.formModel.value.UserName,\n        Email: this.formModel.value.Email,\n        FullName: this.formModel.value.FullName,\n        Password: this.formModel.value.Passwords.Password\n      };\n      return this.http.post(this.BaseURI + '/ApplicationUser/Register', body);\n    }\n    login(formData) {\n      return this.http.post(this.BaseURI + '/ApplicationUser/Login', formData);\n    }\n    getUserProfile() {\n      return this.http.get(this.BaseURI + '/UserProfile');\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}