{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\nimport { tap } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      if (localStorage.getItem('token') != null) {\n        const clonedReq = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + localStorage.getItem('token'))\n        });\n        return next.handle(clonedReq).pipe(tap(succ => {}, err => {\n          if (err.status == 401) {\n            localStorage.removeItem('token');\n            this.router.navigateByUrl('/user/login');\n          }\n        }));\n      } else return next.handle(req.clone());\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}